% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cellid_parameter_scan.R
\name{parameter_scan}
\alias{parameter_scan}
\title{Scan parameters for CellID}
\usage{
parameter_scan(
  parameters.df,
  scan.arguments,
  test.dir = NULL,
  fluorescence.pattern = "^([GCYRT]FP|[GCYRT]\\\\d+)_Position\\\\d+(?:_time\\\\d+)?.tif$",
  progress = TRUE,
  ...
)
}
\arguments{
\item{parameters.df}{Dataframe with one combination of parameters per row.}

\item{scan.arguments}{Output from \code{arguments}, filtered to your scanning needs.}

\item{test.dir}{Working directory for the parameter scan. Creates a sub-directory of \code{tempdir()} if NULL (the default).}

\item{fluorescence.pattern}{Regex describing what the fluorescence/channel ID string looks like (default "^([GCYRT]FP|[GCYRT]\\d+)_Position\\d+_time\\d+.tif$"). There must be only one capturing group, ant it must be for the channel identifier.}

\item{progress}{Print a progress bar if TRUE. Requires the \code{doSNOW} package.}

\item{...}{
  Arguments passed on to \code{\link[=cell2]{cell2}}
  \describe{
    \item{\code{arguments}}{An argument data.frame, as built by \code{rcell2.cellid::arguments}.}
    \item{\code{cell.command}}{By default \code{NULL}, to use the built-in binary. Otherwise a path to a Cell-ID binary executable (get if from https://github.com/darksideoftheshmoo/cellID-linux).}
    \item{\code{n_cores}}{Number of cores to use for position-wise parallelization,internally capped to number of positions in \code{arguments}. Set to 1 to disable parallelization. If NULL, defaults to available cores - 1.}
    \item{\code{dry}}{Do everything without actually running Cell-ID, print the commands that would have been issued.}
    \item{\code{debug_flag}}{Set to 0 to disable Cell-ID printf messages (built-in Cell-ID only).}
    \item{\code{output_coords_to_tsv}}{Set to TRUE to write cell interior and boundary pixels coordinates of each cell to a compressed \code{.tsv} file, located in the main output directory (Cell-ID option '-t'). This data can be loaded with the \code{cell.load.boundaries} function.}
    \item{\code{encode_cellID_in_pixels}}{Set to TRUE to encode cellIDs in the intensity values of the boundary pixels, and blank the rest of the output image (Cell-ID option '-m'). Pixel intensities are proportional to each cellID, following the relationship \code{cellID = 65535 - boundary_intensity - 1}. Only boundary pixels are used by default; this behavior can be modified by enabling \code{label_cells_in_bf}, \code{fill_interior_pixels}, or \code{interior_offset}.}
    \item{\code{label_cells_in_bf}}{Set mask boundary pixel intensities proportional to each cellID, and add cellID numbers to the cells with maximum pixel intensity \code{65535} (Cell-ID option '-l', default FALSE).}
    \item{\code{fill_interior_pixels}}{Fill each cell interior area in the output BF image file with intensity-labeled pixels (Cell-ID option '-i'). This overrides cell labeling.}
    \item{\code{interior_offset}}{Offset boundary and interior pixel intensities by a calculated 'interior_offset' threshold. cellID will relate to interior pixel intensities with the relationship \code{cellID = 65535 - boundary_intensity - interior_offset - 1}. The offset defaults to 5000, but may have a larger value for images or time series with more than 2500 cells (Cell-ID option '-w').}
    \item{\code{write_initial_time}}{Write the absolute time of the first image to a text file (Cell-ID option '-z').}
    \item{\code{save.logs}}{Set to TRUE to save Cell-ID logs to text files, into the output directory of their corresponding position.}
    \item{\code{verbose}}{Print start-up messages.}
    \item{\code{check_fail}}{Whether to produce an error if any output file or directory already exists.}
  }}
}
\value{
Data frame with the results. To use it, have a look at the rmarkdown template bundled in the package, or get it with \code{get_workflow_template_cellid()}.
}
\description{
Scan parameters for CellID
}
\details{
Requires the \code{doSNOW} package.

A few "summary" quantities are calculated for each run:

fft: mean fft.stat

el.p: mean el.p

ucids: Number of found cells

persistence: Average frames per cell

roughness: function copied from the seewave package: "Roughness or total curvature is the integrated squared second derivative" (see: https://cran.r-project.org/web/packages/seewave/index.html).

roughness2: This variation takes the sqrt of roughness and divides by total length. To correct for extra accumulated roughness in cells detected across more t.frames.

Have a look at the examples in the rmarkdown template bundled in the package, or get it with \code{get_workflow_template_cellid()}.
}
