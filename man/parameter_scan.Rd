% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cellid_parameter_scan.R
\name{parameter_scan}
\alias{parameter_scan}
\title{Scan parameters for CellID}
\usage{
parameter_scan(
  parameters.df,
  scan.arguments,
  data.dir,
  test.dir = normalizePath(paste0(tempdir(check = T), "/images_directory/test.dir"),
    mustWork = F),
  fluorescence.pattern = "^([GCYRT]FP|[GCYRT]\\\\d+)_Position\\\\d+_time\\\\d+.tif$",
  ...
)
}
\arguments{
\item{parameters.df}{Dataframe with one combination of parameters per row.}

\item{scan.arguments}{Output from \code{arguments}, filtered to your scanning needs.}

\item{data.dir}{Path to the original images.}

\item{test.dir}{Working directory for the parameter scan.}

\item{fluorescence.pattern}{Regex describing what the fluorescence/channel ID string looks like (default "^([GCYRT]FP|[GCYRT]\\d+)_Position\\d+_time\\d+.tif$"). There must be only one capturing group, ant it must be for the channel identifier.}

\item{...}{
  Arguments passed on to \code{\link[=cell2]{cell2}}
  \describe{
    \item{\code{arguments}}{An argument data.frame, as built by \code{rcell2.cellid::arguments}.}
    \item{\code{cell.command}}{By default \code{NULL}, to use the built-in binary. Otherwise a path to a CellID binary executable (get if from https://github.com/darksideoftheshmoo/cellID-linux).}
    \item{\code{n_cores}}{Number of cores to use for position-wise parallelization,internally capped to number of positions in \code{arguments}. Set to 1 to disable parallelization. If NULL, defaults to available cores - 1.}
    \item{\code{dry}}{Do everything without actually running CellID, print the commands that would have been issued.}
    \item{\code{debug_flag}}{Set to 0 to disable CellID printf messages (builtin CellID only).}
    \item{\code{label_cells_in_bf}}{Set to TRUE to enable labeling of cells with their CellID in the BF output image using number characters (CellID option '-l', default FALSE).}
    \item{\code{encode_cellID_in_pixels}}{Set to TRUE to write cell interior and boundary pixels with intensity-encoded CellIDs and blank the rest of the image (CellID option '-s').}
    \item{\code{fill_interior_pixels}}{Set to TRUE to fill each cell interior area in the output image file with intensity-labeled pixels (CellID option '-i').}
    \item{\code{output_coords_to_tsv}}{Set to TRUE to write cell interior masks and boundary pixels data to a .tsv file in the output directory (CellID option '-m').}
    \item{\code{save.logs}}{Set to TRUE to save CellID logs to text files, into the output directory of their corresponding position.}
    \item{\code{verbose}}{Print startup messages.}
  }}
}
\value{
Data frame with the results. To use it, have a look at the rmarkdown template bundled in the package, or get it with \code{get_workflow_template_cellid()}.
}
\description{
Scan parameters for CellID
}
\details{
A few "summary" quantities are calculated for each run:

fft: mean fft.stat

el.p: mean el.p

ucids: Number of found cells

persistence: Average frames per cell

roughness: function copied from the seewave package: "Roughness or total curvature is the integrated squared second derivative" (see: https://cran.r-project.org/web/packages/seewave/index.html).

roughness2: This variation takes the sqrt of roughness and divides by total length. To correct for extra accumulated roughness in cells detected across more t.frames.
}
\examples{
Have a look at the rmarkdown template bundled in the package, or get it with \code{get_workflow_template_cellid()}.
}
